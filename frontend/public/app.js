class OkkoAIAssistant {
    constructor() {
        this.apiBaseUrl = 'http://localhost:5000/api';
        this.sessionId = this.generateSessionId();
        this.messageHistory = [];
        this.currentContext = {
            time: this.getCurrentTime(),
            weather: '–û–±–ª–∞—á–Ω–æ, +9¬∞C',
            location: '–ú–æ—Å–∫–≤–∞',
            mood: 'neutral'
        };
        
        this.initializeElements();
        this.bindEvents();
        this.updateContext();
        this.loadSession();
        
        // Auto-resize textarea
        this.autoResizeTextarea();
    }

    generateSessionId() {
        return 'okko_session_' + Date.now() + '_' + Math.random().toString(36).substr(2, 9);
    }

    initializeElements() {
        // Chat elements
        this.chatMessages = document.getElementById('chatMessages');
        this.messageInput = document.getElementById('messageInput');
        this.sendButton = document.getElementById('sendButton');
        this.typingIndicator = document.getElementById('typingIndicator');
        this.recommendationsContainer = document.getElementById('recommendationsContainer');
        
        // Context elements
        this.contextDisplay = document.getElementById('contextDisplay');
        this.timeContext = document.getElementById('timeContext');
        this.moodContext = document.getElementById('moodContext');
        this.weatherContext = document.getElementById('weatherContext');
        
        // Sidebar elements
        this.sidebar = document.getElementById('sidebar');
        this.sidebarToggle = document.getElementById('sidebarToggle');
        this.sidebarTime = document.getElementById('sidebarTime');
        this.sidebarLocation = document.getElementById('sidebarLocation');
        this.sidebarWeather = document.getElementById('sidebarWeather');
        
        // Examples dropdown
        this.examplesBtn = document.getElementById('examplesBtn');
        this.examplesList = document.getElementById('examplesList');
        
        // Quick filters
        this.filterBtns = document.querySelectorAll('.filter-btn');
    }

    bindEvents() {
        // Send message events
        this.sendButton.addEventListener('click', () => this.sendMessage());
        this.messageInput.addEventListener('keydown', (e) => {
            if (e.key === 'Enter' && !e.shiftKey) {
                e.preventDefault();
                this.sendMessage();
            }
        });

        // Input events
        this.messageInput.addEventListener('input', () => {
            this.autoResizeTextarea();
            this.updateSendButton();
        });

        // Sidebar toggle
        this.sidebarToggle.addEventListener('click', () => {
            this.sidebar.classList.toggle('open');
        });

        // Examples dropdown
        this.examplesBtn.addEventListener('click', () => {
            this.examplesList.classList.toggle('show');
        });

        // Example items
        document.querySelectorAll('.example-item').forEach(item => {
            item.addEventListener('click', () => {
                const example = item.dataset.example;
                this.messageInput.value = example;
                this.autoResizeTextarea();
                this.updateSendButton();
                this.examplesList.classList.remove('show');
                this.messageInput.focus();
            });
        });

        // Quick filters
        this.filterBtns.forEach(btn => {
            btn.addEventListener('click', () => {
                const mood = btn.dataset.mood;
                this.setMood(mood);
                btn.classList.toggle('active');
                
                // Remove active from other buttons
                this.filterBtns.forEach(otherBtn => {
                    if (otherBtn !== btn) {
                        otherBtn.classList.remove('active');
                    }
                });
            });
        });

        // Click outside to close dropdowns
        document.addEventListener('click', (e) => {
            if (!e.target.closest('.examples-dropdown')) {
                this.examplesList.classList.remove('show');
            }
            if (!e.target.closest('.sidebar') && window.innerWidth <= 768) {
                this.sidebar.classList.remove('open');
            }
        });

        // Detect user location
        this.detectLocation();
    }

    getCurrentTime() {
        const now = new Date();
        const hours = now.getHours();
        const day = now.toLocaleDateString('ru-RU', { weekday: 'long' });
        
        let timeOfDay;
        if (hours >= 6 && hours < 12) timeOfDay = '–£—Ç—Ä–æ';
        else if (hours >= 12 && hours < 18) timeOfDay = '–î–µ–Ω—å';
        else if (hours >= 18 && hours < 22) timeOfDay = '–í–µ—á–µ—Ä';
        else timeOfDay = '–ù–æ—á—å';
        
        return {
            hour: hours,
            day: day,
            timeOfDay: timeOfDay,
            formatted: `${hours}:${now.getMinutes().toString().padStart(2, '0')}, ${day}`
        };
    }

    updateContext() {
        const time = this.getCurrentTime();
        const timeIcon = this.getTimeIcon(time.hour);
        
        this.timeContext.textContent = `${timeIcon} ${time.timeOfDay}`;
        this.sidebarTime.textContent = time.formatted;
        this.sidebarLocation.textContent = this.currentContext.location;
        this.sidebarWeather.textContent = this.currentContext.weather;
        
        this.updateMoodDisplay();
    }

    getTimeIcon(hour) {
        if (hour >= 6 && hour < 12) return '‚òÄÔ∏è';
        if (hour >= 12 && hour < 18) return '‚òÄÔ∏è';
        if (hour >= 18 && hour < 22) return 'üåô';
        return 'üåô';
    }

    updateMoodDisplay() {
        const moodEmojis = {
            happy: 'üòÑ –†–∞–¥–æ—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
            sad: 'üò¢ –ì—Ä—É—Å—Ç–Ω–æ–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ',
            excited: 'ü§© –í–∑–≤–æ–ª–Ω–æ–≤–∞–Ω–Ω–æ–µ',
            relaxed: 'üòå –†–∞—Å—Å–ª–∞–±–ª–µ–Ω–Ω–æ–µ',
            romantic: 'ü•∞ –†–æ–º–∞–Ω—Ç–∏—á–µ—Å–∫–æ–µ',
            thoughtful: 'ü§î –ó–∞–¥—É–º—á–∏–≤–æ–µ',
            scared: 'üò® –°—Ç—Ä–∞—à–Ω–æ–µ',
            energetic: '‚ö°Ô∏è –≠–Ω–µ—Ä–≥–∏—á–Ω–æ–µ',
            neutral: 'üòê –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ–µ'
        };
        
        this.moodContext.textContent = moodEmojis[this.currentContext.mood] || moodEmojis.neutral;
    }

    setMood(mood) {
        this.currentContext.mood = mood;
        this.updateMoodDisplay();
    }

    detectLocation() {
        if ('geolocation' in navigator) {
            navigator.geolocation.getCurrentPosition(
                (position) => {
                    // In a real app, you would geocode these coordinates
                    // For demo purposes, we'll keep the default location
                    console.log('Location detected:', position.coords.latitude, position.coords.longitude);
                },
                (error) => {
                    console.log('Location detection failed:', error.message);
                }
            );
        }
    }

    autoResizeTextarea() {
        this.messageInput.style.height = 'auto';
        this.messageInput.style.height = Math.min(this.messageInput.scrollHeight, 120) + 'px';
    }

    updateSendButton() {
        const hasText = this.messageInput.value.trim().length > 0;
        this.sendButton.disabled = !hasText;
    }

    async sendMessage() {
        const message = this.messageInput.value.trim();
        if (!message) return;

        // Add user message to chat
        this.addMessage(message, 'user');
        
        // Clear input and update UI
        this.messageInput.value = '';
        this.autoResizeTextarea();
        this.updateSendButton();
        
        // Show typing indicator
        this.showTypingIndicator();
        
        try {
            // Send to backend API
            const response = await this.callAPI(message);
            
            // Hide typing indicator
            this.hideTypingIndicator();
            
            // Add assistant response
            this.addMessage(response.response, 'assistant');
            
            // Display recommendations if any
            if (response.recommendations && response.recommendations.length > 0) {
                this.displayRecommendations(response.recommendations);
            }
            
        } catch (error) {
            console.error('Error sending message:', error);
            this.hideTypingIndicator();
            
            // Show fallback response with mock recommendations
            this.handleFallbackResponse(message);
        }
        
        // Save session
        this.saveSession();
    }

    async callAPI(message) {
        const payload = {
            message: message,
            session_id: this.sessionId,
            context: this.currentContext,
            history: this.messageHistory.slice(-10) // Last 10 messages
        };

        const response = await fetch(`${this.apiBaseUrl}/chat`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json',
            },
            body: JSON.stringify(payload)
        });

        if (!response.ok) {
            throw new Error(`HTTP error! status: ${response.status}`);
        }

        return await response.json();
    }

    handleFallbackResponse(userMessage) {
        // Generate contextual response based on user message
        let assistantMessage = '–£–ø—Å! ';
        const lowerMessage = userMessage.toLowerCase();
        
        if (lowerMessage.includes('–∫–æ–º–µ–¥–∏—é') || lowerMessage.includes('–≤–µ—Å–µ–ª–æ–µ') || lowerMessage.includes('—Å–º–µ—à–Ω–æ–µ')) {
            assistantMessage += '–ù–µ —Ö–æ—Ç–∏—Ç–µ –ª–∏ —á—Ç–æ-—Ç–æ –≤–µ—Å–µ–ª–æ–µ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –æ—Ç–ª–∏—á–Ω—ã—Ö –∫–æ–º–µ–¥–∏–π:';
            this.displayMockRecommendations('comedy');
        } else if (lowerMessage.includes('–¥—Ä–∞–º—É') || lowerMessage.includes('–≥—Ä—É—Å—Ç–Ω–æ–µ') || lowerMessage.includes('–ø–µ—á–∞–ª—å–Ω–æ–µ')) {
            assistantMessage += '–í–æ–∑–º–æ–∂–Ω–æ –≤—ã –∏—â–µ—Ç–µ —á—Ç–æ-—Ç–æ –¥—Ä–∞–º–∞—Ç–∏—á–µ—Å–∫–æ–µ? –†–µ–∫–æ–º–µ–Ω–¥—É—é —ç—Ç–∏ –¥—Ä–∞–º—ã:';
            this.displayMockRecommendations('drama');
        } else if (lowerMessage.includes('—Ä–æ–º–∞–Ω—Ç–∏–∫—É') || lowerMessage.includes('–ª—é–±–æ–≤—å')) {
            assistantMessage += '–ù–∞—Å—Ç—Ä–æ–µ–Ω—ã —Ä–æ–º–∞–Ω—Ç–∏—á–Ω–æ! –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ñ–∏–ª—å–º–æ–≤ –æ –ª—é–±–≤–∏:';
            this.displayMockRecommendations('romance');
        } else if (lowerMessage.includes('—É–∂–∞—Å—ã') || lowerMessage.includes('—Å—Ç—Ä–∞—à–Ω–æ–µ') || lowerMessage.includes('—Ö–æ—Ä—Ä–æ—Ä')) {
            assistantMessage += '–•–æ—Ç–∏—Ç–µ –ø–æ—â–µ–∫–æ—Ç–∞—Ç—å –Ω–µ—Ä–≤—ã? –í–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ –∂—É—Ç–∫–∏—Ö —Ñ–∏–ª—å–º–æ–≤ —É–∂–∞—Å–æ–≤:';
            this.displayMockRecommendations('horror');
        } else if (lowerMessage.includes('–±–æ–µ–≤–∏–∫') || lowerMessage.includes('—ç–∫—à–Ω') || lowerMessage.includes('–¥–∏–Ω–∞–º–∏—á–Ω–æ–µ')) {
            assistantMessage += '–ñ–∞–∂–¥–µ—Ç–µ —ç–∫—à–Ω–∞? –í–æ—Ç –∑–∞—Ö–≤–∞—Ç—ã–≤–∞—é—â–∏–µ –±–æ–µ–≤–∏–∫–∏:';
            this.displayMockRecommendations('action');
        } else {
            assistantMessage += '–ò–∑–≤–∏–Ω–∏—Ç–µ, —è –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≤—è–∑–∞—Ç—å—Å—è —Å —Å–µ—Ä–≤–µ—Ä–æ–º, –Ω–æ –≤–æ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Ö–æ—Ä–æ—à–∏—Ö –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤:';
            this.displayMockRecommendations('mixed');
        }
        
        this.addMessage(assistantMessage, 'assistant');
    }

    displayMockRecommendations(genre) {
        const mockData = {
            comedy: [
                {
                    title: '–ë–æ–ª—å—à–æ–π –õ–µ–±–æ–≤—Å–∫–∏',
                    genres: ['–∫–æ–º–µ–¥–∏—è', '–∫—Ä–∏–º–∏–Ω–∞–ª'],
                    description: '–ö—É–ª—å—Ç–æ–≤–∞—è –∫–æ–º–µ–¥–∏—è –±—Ä–∞—Ç—å–µ–≤ –ö–æ—ç–Ω –æ —Ö–∏–ø–ø–∏-–ø–∞—Ü–∏—Ñ–∏—Å—Ç–µ, –∫–æ—Ç–æ—Ä—ã–π —Å–ª—É—á–∞–π–Ω–æ –æ–∫–∞–∑—ã–≤–∞–µ—Ç—Å—è –≤—Ç—è–Ω—É—Ç –≤ –∫—Ä–∏–º–∏–Ω–∞–ª—å–Ω—É—é –∏—Å—Ç–æ—Ä–∏—é.',
                    score: 8.2,
                    url: 'https://okko.tv/movie/the-big-lebowski'
                },
                {
                    title: '–û–¥–∏–Ω–Ω–∞–¥—Ü–∞—Ç—å –¥—Ä—É–∑–µ–π –û—É—à–µ–Ω–∞',
                    genres: ['–∫–æ–º–µ–¥–∏—è', '—Ç—Ä–∏–ª–ª–µ—Ä', '–∫—Ä–∏–º–∏–Ω–∞–ª'],
                    description: '–î—ç–Ω–Ω–∏ –û—É—à–µ–Ω —Å–æ–±–∏—Ä–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É –ø–µ—Ä–≤–æ–∫–ª–∞—Å—Å–Ω—ã—Ö —Å–ø–µ—Ü–∏–∞–ª–∏—Å—Ç–æ–≤, —á—Ç–æ–±—ã –æ–≥—Ä–∞–±–∏—Ç—å —Ç—Ä–∏ –∫—Ä—É–ø–Ω–µ–π—à–∏—Ö –∫–∞–∑–∏–Ω–æ –õ–∞—Å-–í–µ–≥–∞—Å–∞.',
                    score: 7.8,
                    url: 'https://okko.tv/movie/oceans-eleven'
                }
            ],
            drama: [
                {
                    title: '–ü–æ–±–µ–≥ –∏–∑ –®–æ—É—à–µ–Ω–∫–∞',
                    genres: ['–¥—Ä–∞–º–∞', '—Ç—Ä–∏–ª–ª–µ—Ä', '–∫—Ä–∏–º–∏–Ω–∞–ª'],
                    description: '–ò—Å—Ç–æ—Ä–∏—è –±–∞–Ω–∫–∏—Ä–∞, –Ω–µ—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ –ø—Ä–∏–≥–æ–≤–æ—Ä–µ–Ω–Ω–æ–≥–æ –∫ –ø–æ–∂–∏–∑–Ω–µ–Ω–Ω–æ–º—É –∑–∞–∫–ª—é—á–µ–Ω–∏—é –≤ —Ç—é—Ä—å–º–µ –®–æ—É—à–µ–Ω–∫.',
                    score: 9.1,
                    url: 'https://okko.tv/movie/the-shawshank-redemption'
                },
                {
                    title: '–í—Å–µ –≤–µ–∑–¥–µ –∏ —Å—Ä–∞–∑—É, –≤—Å–µ–ª–µ–Ω–Ω–∞—è',
                    genres: ['–¥—Ä–∞–º–∞', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'],
                    description: '–ñ–µ–Ω—â–∏–Ω–∞, –∫–æ—Ç–æ—Ä–æ–π –ø—Ä–µ–¥—Å—Ç–æ–∏—Ç —Å–ø–∞—Å—Ç–∏ –º–∏—Ä, –∏—Å—Å–ª–µ–¥—É—è –¥—Ä—É–≥–∏–µ –≤—Å–µ–ª–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –æ–Ω–∞ –º–æ–≥–ª–∞ –±—ã –ø—Ä–æ–∂–∏—Ç—å.',
                    score: 8.9,
                    url: 'https://okko.tv/movie/drama2'
                }
            ],
            romance: [
                {
                    title: '–õ–∞-–õ–∞ –õ–µ–Ω–¥',
                    genres: ['–º—é–∑–∏–∫–ª', '–º–µ–ª–æ–¥—Ä–∞–º–∞', '–¥—Ä–∞–º–∞'],
                    description: '–ò—Å—Ç–æ—Ä–∏—è –ª—é–±–≤–∏ —Å—Ç–∞—Ä–ª–µ—Ç–∫–∏ –∏ –¥–∂–∞–∑–æ–≤–æ–≥–æ –º—É–∑—ã–∫–∞–Ω—Ç–∞, –∫–æ—Ç–æ—Ä—ã–µ –ø—ã—Ç–∞—é—Ç—Å—è –æ—Å—É—â–µ—Å—Ç–≤–∏—Ç—å —Å–≤–æ–∏ –º–µ—á—Ç—ã –≤ –õ–æ—Å-–ê–Ω–¥–∂–µ–ª–µ—Å–µ.',
                    score: 8.7,
                    url: 'https://okko.tv/movie/la-la-land'
                },
                {
                    title: '–í–µ—á–Ω–æ–µ —Å–∏—è–Ω–∏–µ —á–∏—Å—Ç–æ–≥–æ —Ä–∞–∑—É–º–∞',
                    genres: ['–º–µ–ª–æ–¥—Ä–∞–º–∞', '–¥—Ä–∞–º–∞', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'],
                    description: '–ü–∞—Ä–∞ —Ä–µ—à–∞–µ—Ç —Å—Ç–µ—Ä–µ—Ç—å –¥—Ä—É–≥ –¥—Ä—É–≥–∞ –∏–∑ –ø–∞–º—è—Ç–∏, –Ω–æ –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ –ø–æ–Ω–∏–º–∞—é—Ç, —á—Ç–æ –Ω–µ –º–æ–≥—É—Ç –∂–∏—Ç—å –¥—Ä—É–≥ –±–µ–∑ –¥—Ä—É–≥–∞.',
                    score: 8.5,
                    url: 'https://okko.tv/movie/vechnoe-siyanie-chistogo-razuma'
                }
            ],
            horror: [
                {
                    title: '–ü—Ä–æ—á—å',
                    genres: ['—É–∂–∞—Å—ã', '—Ç—Ä–∏–ª–ª–µ—Ä', '–¥–µ—Ç–µ–∫—Ç–∏–≤'],
                    description: '–ú–æ–ª–æ–¥–æ–π —Ç–µ–º–Ω–æ–∫–æ–∂–∏–π —Ñ–æ—Ç–æ–≥—Ä–∞—Ñ –µ–¥–µ—Ç –∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å —Ä–æ–¥–∏—Ç–µ–ª—è–º–∏ —Å–≤–æ–µ–π –±–µ–ª–æ–π –¥–µ–≤—É—à–∫–∏, –Ω–æ —É–∏–∫-—ç–Ω–¥ –ø—Ä–µ–≤—Ä–∞—â–∞–µ—Ç—Å—è –≤ –∫–æ—à–º–∞—Ä.',
                    score: 7.9,
                    url: 'https://okko.tv/movie/proch'
                },
                {
                    title: '–¢–∏—Ö–æ–µ –º–µ—Å—Ç–æ',
                    genres: ['—É–∂–∞—Å—ã', '—Ç—Ä–∏–ª–ª–µ—Ä', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞'],
                    description: '–°–µ–º—å—è —Å –¥–µ—Ç—å–º–∏ –≤—ã–∂–∏–≤–∞–µ—Ç –≤ –º–∏—Ä–µ, –Ω–∞—Å–µ–ª–µ–Ω–Ω–æ–º —Å–ª–µ–ø—ã–º–∏ –º–æ–Ω—Å—Ç—Ä–∞–º–∏, —Ä–µ–∞–≥–∏—Ä—É—é—â–∏–º–∏ –Ω–∞ –ª—é–±–æ–π –∑–≤—É–∫.',
                    score: 8.1,
                    url: 'https://okko.tv/movie/tihoe-mesto'
                }
            ],
            action: [
                {
                    title: '–î–∂–æ–Ω –£–∏–∫',
                    genres: ['–±–æ–µ–≤–∏–∫', '—Ç—Ä–∏–ª–ª–µ—Ä'],
                    description: '–ë—ã–≤—à–∏–π –Ω–∞–µ–º–Ω—ã–π —É–±–∏–π—Ü–∞ –≤—ã–Ω—É–∂–¥–µ–Ω –≤–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–∏—Ä –∫—Ä–∏–º–∏–Ω–∞–ª–∞, —á—Ç–æ–±—ã –æ—Ç–æ–º—Å—Ç–∏—Ç—å –∑–∞ —Å–º–µ—Ä—Ç—å —Å–≤–æ–µ–π —Å–æ–±–∞–∫–∏.',
                    score: 8.4,
                    url: 'https://okko.tv/movie/dzhon-uik'
                },
                {
                    title: '–ë–µ–∑—É–º–Ω—ã–π –ú–∞–∫—Å: –î–æ—Ä–æ–≥–∞ —è—Ä–æ—Å—Ç–∏',
                    genres: ['–±–æ–µ–≤–∏–∫', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ø–æ—Å—Ç–∞–ø–æ–∫–∞–ª–∏–ø—Å–∏—Å'],
                    description: '–í –ø–æ—Å—Ç-–∞–ø–æ–∫–∞–ª–∏–ø—Ç–∏—á–µ—Å–∫–æ–º –º–∏—Ä–µ –ú–∞–∫—Å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω—è–µ—Ç—Å—è –∫ –≥—Ä—É–ø–ø–µ –∂–µ–Ω—â–∏–Ω, —Å–ø–∞—Å–∞—é—â–∏—Ö—Å—è –æ—Ç —Ç–∏—Ä–∞–Ω–∞.',
                    score: 8.8,
                    url: 'https://okko.tv/movie/bezumnyy-maks-doroga-yarosti'
                }
            ],
            mixed: [
                {
                    title: '–ü–∞—Ä–∞–∑–∏—Ç—ã',
                    genres: ['—Ç—Ä–∏–ª–ª–µ—Ä', '–¥—Ä–∞–º–∞', '–∫–æ–º–µ–¥–∏—è'],
                    description: '–ë–µ–¥–Ω–∞—è —Å–µ–º—å—è –æ–±–º–∞–Ω–æ–º –ø—Ä–æ–Ω–∏–∫–∞–µ—Ç –≤ –∂–∏–∑–Ω—å –±–æ–≥–∞—Ç–æ–π —Å–µ–º—å–∏, —á—Ç–æ –ø—Ä–∏–≤–æ–¥–∏—Ç –∫ –Ω–µ–ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º—ã–º –ø–æ—Å–ª–µ–¥—Å—Ç–≤–∏—è–º.',
                    score: 9.3,
                    url: 'https://okko.tv/movie/parazity'
                },
                {
                    title: '–ò–Ω—Ç–µ—Ä—Å—Ç–µ–ª–ª–∞—Ä',
                    genres: ['—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–¥—Ä–∞–º–∞', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'],
                    description: '–ì—Ä—É–ø–ø–∞ –∏—Å—Å–ª–µ–¥–æ–≤–∞—Ç–µ–ª–µ–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –≤ –∫–æ—Å–º–æ—Å, —á—Ç–æ–±—ã –Ω–∞–π—Ç–∏ –Ω–æ–≤—ã–π –¥–æ–º –¥–ª—è —á–µ–ª–æ–≤–µ—á–µ—Å—Ç–≤–∞.',
                    score: 9.0,
                    url: 'https://okko.tv/movie/interstellar'
                },
                {
                    title: '–î—é–Ω–∞',
                    genres: ['–¥—Ä–∞–º–∞', '—Ñ–∞–Ω—Ç–∞—Å—Ç–∏–∫–∞', '–ø—Ä–∏–∫–ª—é—á–µ–Ω–∏—è'],
                    description: '–ù–∞—Å–ª–µ–¥–Ω–∏–∫ –≤–µ–ª–∏–∫–æ–≥–æ –¥–æ–º–∞ –ê—Ç—Ä–µ–π–¥–µ—Å –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è –Ω–∞ —Å–∞–º—É—é –æ–ø–∞—Å–Ω—É—é –ø–ª–∞–Ω–µ—Ç—É –≤–æ –≤—Å–µ–ª–µ–Ω–Ω–æ–π.',
                    score: 8.6,
                    url: 'https://okko.tv/movie/dyuna'
                }
            ]
        };
        
        const recommendations = mockData[genre] || mockData.mixed;
        this.displayRecommendations(recommendations);
    }

    displayRecommendations(recommendations) {
        const grid = document.createElement('div');
        grid.className = 'recommendations-grid';
        
        recommendations.forEach(movie => {
            const card = this.createMovieCard(movie);
            grid.appendChild(card);
        });
        
        this.recommendationsContainer.innerHTML = '';
        this.recommendationsContainer.appendChild(grid);
        
        // Scroll to recommendations
        setTimeout(() => {
            this.recommendationsContainer.scrollIntoView({ 
                behavior: 'smooth', 
                block: 'nearest' 
            });
        }, 100);
    }

    createMovieCard(movie) {
        const card = document.createElement('div');
        card.className = 'movie-card';
        
        const genresHtml = movie.genres.map(genre => 
            `<span class="genre-tag">${genre}</span>`
        ).join('');
        
        card.innerHTML = `
            <div class="movie-card__poster">
                <i class="fas fa-film"></i>
            </div>
            <div class="movie-card__content">
                <h3 class="movie-card__title">${movie.title}</h3>
                <div class="movie-card__genres">${genresHtml}</div>
                <p class="movie-card__description">${movie.description}</p>
                <div class="movie-card__footer">
                    <div class="movie-card__score">${movie.score}</div>
                    <a href="${movie.url}" target="_blank" class="movie-card__btn">
                        <i class="fas fa-play"></i>
                        –°–º–æ—Ç—Ä–µ—Ç—å –Ω–∞ Okko
                    </a>
                </div>
            </div>
        `;
        
        card.style.animation = 'slideIn 0.5s ease-out';
        return card;
    }

    addMessage(content, sender) {
        const messageDiv = document.createElement('div');
        messageDiv.className = `message ${sender}-message`;
        
        const avatarDiv = document.createElement('div');
        avatarDiv.className = 'message__avatar';
        avatarDiv.innerHTML = sender === 'user' ? '<i class="fas fa-user"></i>' : '<i class="fas fa-robot"></i>';
        
        const contentDiv = document.createElement('div');
        contentDiv.className = 'message__content';
        contentDiv.innerHTML = `<p>${content}</p>`;
        
        messageDiv.appendChild(avatarDiv);
        messageDiv.appendChild(contentDiv);
        
        this.chatMessages.appendChild(messageDiv);
        
        // Store in history
        this.messageHistory.push({
            content: content,
            sender: sender,
            timestamp: new Date().toISOString()
        });
        
        // Scroll to bottom
        this.scrollToBottom();
    }

    showTypingIndicator() {
        this.typingIndicator.style.display = 'flex';
        this.scrollToBottom();
    }

    hideTypingIndicator() {
        this.typingIndicator.style.display = 'none';
    }

    scrollToBottom() {
        setTimeout(() => {
            this.chatMessages.scrollTop = this.chatMessages.scrollHeight;
        }, 100);
    }

    saveSession() {
        const sessionData = {
            sessionId: this.sessionId,
            messageHistory: this.messageHistory,
            context: this.currentContext,
            timestamp: new Date().toISOString()
        };
        
        // Note: localStorage is not available in sandboxed environment
        // In a real implementation, this would save to localStorage or send to server
        console.log('Session saved:', sessionData);
    }

    loadSession() {
        // Note: localStorage is not available in sandboxed environment
        // In a real implementation, this would load from localStorage
        console.log('Session loaded for:', this.sessionId);
        
        // For demo, we'll start fresh each time
        this.messageHistory = [];
    }
}

// Initialize the application when DOM is loaded
document.addEventListener('DOMContentLoaded', () => {
    const app = new OkkoAIAssistant();
    
    // Add some demo functionality
    console.log('Okko AI Assistant initialized successfully');
    
    // Update time every minute
    setInterval(() => {
        app.updateContext();
    }, 60000);
});